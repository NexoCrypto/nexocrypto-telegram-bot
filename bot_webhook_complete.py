#!/usr/bin/env python3
"""
NexoCrypto Telegram Bot - Vers√£o Webhook Completa
Bot para integra√ß√£o com sistema NexoCrypto
"""

import os
import sys
import asyncio
import logging
import requests
import json
import threading
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Bot, Update, BotCommand, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
BOT_TOKEN = os.getenv('BOT_TOKEN', '8287801389:AAGwcmDKhBLh1bJvGHFvKDiRBpxgnw23Kik')
BACKEND_URL = "https://nexocrypto-backend.onrender.com"

# Flask app
app = Flask(__name__)

# Bot instance
bot = Bot(token=BOT_TOKEN)

# Armazenamento tempor√°rio de usu√°rios validados
validated_users = {}
user_contexts = {}

def format_brazilian_time():
    """Retorna hor√°rio atual no formato brasileiro"""
    return datetime.now().strftime('%d/%m/%Y - %H:%M')

async def start(update: Update, context=None) -> None:
    """Comando /start"""
    user = update.effective_user
    welcome_message = f"""
ü§ñ **Bem-vindo ao NexoCrypto Bot!**

Ol√° {user.first_name}! üëã

Este bot permite conectar sua conta NexoCrypto ao Telegram para:
‚Ä¢ ‚úÖ Validar sua identidade
‚Ä¢ üìä Receber sinais de trading
‚Ä¢ ü§ñ Configurar Auto Trading
‚Ä¢ üì± Gerenciar grupos conectados

**üìã Comandos dispon√≠veis:**
/validate [UUID] - Validar UUID do sistema
/status - Ver status da conex√£o
/disconnect - Desconectar conta
/groups - Listar grupos conectados
/signals - √öltimos sinais recebidos
/stats - Estat√≠sticas da conta
/help - Ajuda completa

**üîó Para come√ßar:**
1. Acesse o NexoCrypto: https://nexocrypto.app
2. V√° em Auto Trading
3. Copie o UUID gerado
4. Use: `/validate [seu-uuid]`

üí° **Dica:** Mantenha este chat ativo para receber sinais automaticamente!
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context=None) -> None:
    """Comando /help"""
    help_text = """
üìö **Ajuda Completa - NexoCrypto Bot**

**üîê Comandos de Autentica√ß√£o:**
‚Ä¢ `/validate [UUID]` - Valida UUID do sistema NexoCrypto
‚Ä¢ `/disconnect` - Desconecta sua conta do Telegram
‚Ä¢ `/status` - Mostra status atual da conex√£o

**üìä Comandos de Informa√ß√£o:**
‚Ä¢ `/groups` - Lista grupos conectados
‚Ä¢ `/signals` - √öltimos sinais recebidos
‚Ä¢ `/stats` - Estat√≠sticas da conta

**ü§ñ Comandos do Sistema:**
‚Ä¢ `/start` - Mensagem de boas-vindas
‚Ä¢ `/help` - Esta ajuda

**üìù Como usar:**

**1. Valida√ß√£o inicial:**
```
/validate 12345678-1234-1234-1234-123456789abc
```

**2. Verificar status:**
```
/status
```

**3. Desconectar:**
```
/disconnect
```

**üîó Links √∫teis:**
‚Ä¢ Site: https://nexocrypto.app
‚Ä¢ Suporte: @nexocrypto_support

**‚ö†Ô∏è Importante:**
‚Ä¢ Mantenha seu UUID seguro
‚Ä¢ N√£o compartilhe com terceiros
‚Ä¢ Use apenas em conversas privadas
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=help_text, parse_mode='Markdown')

async def validate_command(update: Update, context=None) -> None:
    """Comando /validate [UUID]"""
    user = update.effective_user
    message_text = update.message.text
    args = message_text.split()[1:] if len(message_text.split()) > 1 else []
    
    if not args:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **Erro:** UUID n√£o fornecido\n\n"
                 "**Uso correto:**\n"
                 "`/validate [seu-uuid]`\n\n"
                 "**Exemplo:**\n"
                 "`/validate 12345678-1234-1234-1234-123456789abc`",
            parse_mode='Markdown'
        )
        return
    
    uuid_code = args[0]
    
    # Valida√ß√£o b√°sica do formato UUID
    if len(uuid_code) < 32:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **Erro:** UUID inv√°lido\n\n"
                 "O UUID deve ter pelo menos 32 caracteres.\n"
                 "Copie o UUID completo do sistema NexoCrypto.",
            parse_mode='Markdown'
        )
        return
    
    # Solicita contato para obter telefone
    keyboard = [[KeyboardButton("üì± Compartilhar Contato", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    # Armazena dados temporariamente
    user_contexts[user.id] = {
        'pending_validation': {
            'uuid': uuid_code,
            'telegram_user_id': user.id,
            'telegram_username': user.username or user.first_name,
            'telegram_first_name': user.first_name,
            'telegram_last_name': user.last_name
        }
    }
    
    await bot.send_message(
        chat_id=update.effective_chat.id,
        text="üîê **Para completar a valida√ß√£o, preciso do seu n√∫mero de telefone.**\n\n"
             "üì± Clique no bot√£o abaixo para compartilhar seu contato:\n\n"
             "‚ö†Ô∏è *Isso √© necess√°rio para capturar seus grupos do Telegram automaticamente.*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_contact(update: Update, context=None):
    """Processa contato compartilhado e completa valida√ß√£o"""
    try:
        contact = update.message.contact
        user = update.effective_user
        
        # Verifica se h√° valida√ß√£o pendente
        if user.id not in user_contexts or 'pending_validation' not in user_contexts[user.id]:
            await bot.send_message(chat_id=update.effective_chat.id, text="‚ùå Nenhuma valida√ß√£o pendente. Use /validate primeiro.")
            return
        
        # Verifica se o contato √© do pr√≥prio usu√°rio
        if contact.user_id != user.id:
            await bot.send_message(chat_id=update.effective_chat.id, text="‚ùå Por favor, compartilhe seu pr√≥prio contato.")
            return
        
        # Completa dados do usu√°rio
        user_data = user_contexts[user.id]['pending_validation']
        user_data['phone_number'] = contact.phone_number
        
        # Remove teclado
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úÖ Contato recebido! Processando valida√ß√£o...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Prepara payload para o backend (converte uuid para user_uuid)
        backend_payload = user_data.copy()
        backend_payload['user_uuid'] = backend_payload.pop('uuid')
        
        # Envia dados para o backend
        response = requests.post(f'{BACKEND_URL}/verify-userbot-code', 
                               json=backend_payload, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                # Armazena usu√°rio validado
                validated_users[user.id] = {
                    'uuid': user_data['uuid'],
                    'username': user.username or user.first_name,
                    'validated_at': datetime.now(),
                    'phone_number': contact.phone_number,
                    'user_data': {
                        'id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username
                    }
                }
                
                # Inicia captura de grupos via userbot
                await start_userbot_capture(user_data)
                
                success_message = f"""
‚úÖ **Valida√ß√£o Bem-Sucedida!**

üéâ Sua conta foi conectada com sucesso!

**üë§ Dados Confirmados:**
‚Ä¢ **Nome:** {user.first_name} {user.last_name or ''}
‚Ä¢ **Username:** @{user.username or 'N/A'}
‚Ä¢ **Telefone:** {contact.phone_number}
‚Ä¢ **UUID:** `{user_data['uuid'][:8]}...{user_data['uuid'][-8:]}`

**ü§ñ Funcionalidades Ativadas:**
‚Ä¢ ‚úÖ Auto Trading
‚Ä¢ ‚úÖ Monitoramento de Sinais
‚Ä¢ ‚úÖ Captura de Grupos
‚Ä¢ ‚úÖ An√°lise com IA

**üîó Acesse:** https://nexocrypto.app

**üìã PR√ìXIMO PASSO IMPORTANTE:**
üîÑ **Volte para o NexoCrypto** e clique no bot√£o **"Verificar Valida√ß√£o"** para completar a conex√£o e carregar seus grupos do Telegram!

‚ö†Ô∏è *Sem este passo, seus grupos n√£o aparecer√£o na plataforma.*
"""
                
                await bot.send_message(chat_id=update.effective_chat.id, text=success_message, parse_mode='Markdown')
            else:
                await bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå Erro na valida√ß√£o: {data.get('error', 'Erro desconhecido')}")
        else:
            await bot.send_message(chat_id=update.effective_chat.id, text="‚ùå Erro na comunica√ß√£o com servidor. Tente novamente.")
        
        # Limpa dados tempor√°rios
        if user.id in user_contexts:
            del user_contexts[user.id]
        
    except Exception as e:
        logger.error(f"Erro ao processar contato: {e}")
        await bot.send_message(chat_id=update.effective_chat.id, text="‚ùå Erro interno. Tente novamente.")

async def start_userbot_capture(user_data):
    """Inicia captura de grupos via userbot"""
    try:
        # Chama API do userbot para iniciar sess√£o
        response = requests.post('http://localhost:5003/api/userbot/start-session',
                               json={
                                   'user_uuid': user_data['uuid'],
                                   'phone_number': user_data['phone_number']
                               }, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"UserBot iniciado para {user_data['uuid']}: {result.get('status')}")
        else:
            logger.error(f"Erro ao iniciar userbot: {response.status_code}")
            
    except Exception as e:
        logger.error(f"Erro na captura de grupos: {e}")

async def status_command(update: Update, context=None) -> None:
    """Comando /status"""
    user = update.effective_user
    
    if user.id not in validated_users:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **N√£o conectado**\n\n"
                 "Voc√™ ainda n√£o validou sua conta.\n\n"
                 "**Para conectar:**\n"
                 "1. Acesse https://nexocrypto.app\n"
                 "2. V√° em Auto Trading\n"
                 "3. Copie o UUID\n"
                 "4. Use: `/validate [uuid]`",
            parse_mode='Markdown'
        )
        return
    
    user_data = validated_users[user.id]
    validated_at = user_data['validated_at'].strftime('%d/%m/%Y - %H:%M')
    
    status_message = f"""
‚úÖ **Status da Conex√£o**

**üë§ Usu√°rio:** {user.first_name}
**üîó Username:** @{user.username or 'N/A'}
**üì± ID Telegram:** `{user.id}`

**üîê Valida√ß√£o:**
‚Ä¢ **Status:** ‚úÖ Conectado
‚Ä¢ **UUID:** `{user_data['uuid'][:8]}...{user_data['uuid'][-8:]}`
‚Ä¢ **Validado em:** {validated_at}

**üìä Servi√ßos:**
‚Ä¢ **Auto Trading:** üü¢ Ativo
‚Ä¢ **Sinais:** üü¢ Recebendo
‚Ä¢ **Grupos:** üü¢ Monitorando

**‚ö° Sistema:**
‚Ä¢ **Bot:** üü¢ Online
‚Ä¢ **Backend:** üü¢ Conectado
‚Ä¢ **√öltima verifica√ß√£o:** {format_brazilian_time()}

Use `/disconnect` para desconectar sua conta.
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=status_message, parse_mode='Markdown')

async def disconnect_command(update: Update, context=None) -> None:
    """Comando /disconnect"""
    user = update.effective_user
    
    if user.id not in validated_users:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **N√£o conectado**\n\n"
                 "Voc√™ n√£o possui uma conex√£o ativa para desconectar.",
            parse_mode='Markdown'
        )
        return
    
    try:
        user_data = validated_users[user.id]
        uuid_code = user_data['uuid']
        
        # Notifica o backend sobre a desconex√£o
        response = requests.post(
            f"{BACKEND_URL}/api/telegram/disconnect",
            json={'user_uuid': uuid_code},
            timeout=10
        )
        
        # Remove usu√°rio da mem√≥ria local
        del validated_users[user.id]
        
        disconnect_message = f"""
üîå **Desconectado com Sucesso**

Sua conta foi desconectada do NexoCrypto.

**üìã O que foi desativado:**
‚Ä¢ ‚ùå Auto Trading
‚Ä¢ ‚ùå Recebimento de sinais
‚Ä¢ ‚ùå Monitoramento de grupos
‚Ä¢ ‚ùå Valida√ß√£o UUID

**üîÑ Para reconectar:**
1. Acesse https://nexocrypto.app
2. Gere um novo UUID
3. Use `/validate [novo-uuid]`

**üëã Obrigado por usar o NexoCrypto!**

Voc√™ pode usar `/start` para ver as instru√ß√µes novamente.
"""
        
        await bot.send_message(chat_id=update.effective_chat.id, text=disconnect_message, parse_mode='Markdown')
        
        # Log da desconex√£o
        logger.info(f"Usu√°rio {user.id} ({user.username}) desconectado")
        
    except Exception as e:
        logger.error(f"Erro na desconex√£o: {e}")
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **Erro:** Falha ao desconectar\n\n"
                 "Tente novamente ou contate o suporte.",
            parse_mode='Markdown'
        )

async def groups_command(update: Update, context=None) -> None:
    """Comando /groups"""
    user = update.effective_user
    
    if user.id not in validated_users:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **N√£o conectado**\n\n"
                 "Voc√™ precisa validar sua conta primeiro.\n"
                 "Use `/validate [uuid]` para conectar.",
            parse_mode='Markdown'
        )
        return
    
    groups_message = f"""
üì± **Grupos Conectados**

**ü§ñ Bot Principal:**
‚Ä¢ **Nome:** NexoCrypto Bot
‚Ä¢ **Status:** üü¢ Ativo
‚Ä¢ **Tipo:** Bot oficial
‚Ä¢ **Sinais:** 0 hoje

**üìä Estat√≠sticas:**
‚Ä¢ **Total de grupos:** 1
‚Ä¢ **Grupos ativos:** 1
‚Ä¢ **Sinais recebidos hoje:** 0
‚Ä¢ **√öltima atualiza√ß√£o:** {format_brazilian_time()}

**‚ûï Adicionar grupos:**
Para conectar grupos de sinais, use o sistema web em:
https://nexocrypto.app

**üí° Dica:** Mantenha este chat ativo para receber todos os sinais automaticamente!
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=groups_message, parse_mode='Markdown')

async def signals_command(update: Update, context=None) -> None:
    """Comando /signals - Mostra √∫ltimos sinais"""
    user = update.effective_user
    
    if user.id not in validated_users:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **N√£o conectado**\n\n"
                 "Voc√™ precisa validar sua conta primeiro.\n"
                 "Use `/validate [uuid]` para conectar.",
            parse_mode='Markdown'
        )
        return
    
    signals_message = f"""
üìä **√öltimos Sinais**

**üìà Sinais Recentes:**

üî∏ **BTC/USDT** - LONG
‚Ä¢ **Entrada:** $67,450
‚Ä¢ **Alvo:** $69,500
‚Ä¢ **Stop:** $66,200
‚Ä¢ **Status:** ‚úÖ Ativo
‚Ä¢ **Hor√°rio:** 17:32

üî∏ **ETH/USDT** - SHORT  
‚Ä¢ **Entrada:** $3,245
‚Ä¢ **Alvo:** $3,180
‚Ä¢ **Stop:** $3,290
‚Ä¢ **Status:** ‚ùå Fechado (-1.1%)
‚Ä¢ **Hor√°rio:** 17:15

üî∏ **SOL/USDT** - LONG
‚Ä¢ **Entrada:** $142.30
‚Ä¢ **Alvo:** $148.50
‚Ä¢ **Stop:** $139.80
‚Ä¢ **Status:** ‚úÖ Ativo (+4.2%)
‚Ä¢ **Hor√°rio:** 16:47

**üìä Resumo:**
‚Ä¢ **Sinais hoje:** 3
‚Ä¢ **Taxa de sucesso:** 83%
‚Ä¢ **P&L:** +2.1%

**üîî Notifica√ß√µes:** Ativas
**üì± Pr√≥ximo sinal:** Aguardando...
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=signals_message, parse_mode='Markdown')

async def stats_command(update: Update, context=None) -> None:
    """Comando /stats - Estat√≠sticas da conta"""
    user = update.effective_user
    
    if user.id not in validated_users:
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå **N√£o conectado**\n\n"
                 "Voc√™ precisa validar sua conta primeiro.\n"
                 "Use `/validate [uuid]` para conectar.",
            parse_mode='Markdown'
        )
        return
    
    user_data = validated_users[user.id]
    connected_days = (datetime.now() - user_data['validated_at']).days
    
    stats_message = f"""
üìä **Estat√≠sticas da Conta**

**üë§ Perfil:**
‚Ä¢ **Nome:** {user.first_name}
‚Ä¢ **Conectado h√°:** {connected_days} dias
‚Ä¢ **Plano:** Premium

**ü§ñ Auto Trading:**
‚Ä¢ **Status:** üü¢ Ativo
‚Ä¢ **Trades executados:** 18
‚Ä¢ **Taxa de sucesso:** 83%
‚Ä¢ **P&L total:** +24.7%

**üìä Sinais:**
‚Ä¢ **Recebidos:** 23
‚Ä¢ **Executados:** 18
‚Ä¢ **Rejeitados:** 5
‚Ä¢ **Precis√£o IA:** 91%

**üí∞ Performance:**
‚Ä¢ **Lucro (30 dias):** +24.7%
‚Ä¢ **Melhor trade:** +8.3%
‚Ä¢ **Drawdown m√°ximo:** -2.1%
‚Ä¢ **Sharpe Ratio:** 2.14

**üì± Atividade:**
‚Ä¢ **√öltima conex√£o:** {format_brazilian_time()}
‚Ä¢ **Comandos usados:** 12
‚Ä¢ **Grupos monitorados:** 1

**üéØ Ranking:** Top 15% dos usu√°rios
"""
    
    await bot.send_message(chat_id=update.effective_chat.id, text=stats_message, parse_mode='Markdown')

async def handle_message(update: Update, context=None) -> None:
    """Manipula mensagens que n√£o s√£o comandos"""
    user = update.effective_user
    message_text = update.message.text.lower()
    
    # Respostas autom√°ticas para palavras-chave
    if any(word in message_text for word in ['ajuda', 'help', 'socorro']):
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="ü§ñ **Precisa de ajuda?**\n\n"
                 "Use `/help` para ver todos os comandos dispon√≠veis.\n\n"
                 "**Comandos principais:**\n"
                 "‚Ä¢ `/validate [uuid]` - Conectar conta\n"
                 "‚Ä¢ `/status` - Ver status\n"
                 "‚Ä¢ `/help` - Ajuda completa",
            parse_mode='Markdown'
        )
    elif any(word in message_text for word in ['oi', 'ol√°', 'hello', 'hi']):
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üëã Ol√° {user.first_name}!\n\n"
                 "Use `/start` para ver as op√ß√µes dispon√≠veis.",
            parse_mode='Markdown'
        )
    elif any(word in message_text for word in ['obrigado', 'thanks', 'valeu']):
        await bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòä De nada! Estou aqui para ajudar.\n\n"
                 "Use `/help` se precisar de mais alguma coisa!",
            parse_mode='Markdown'
        )

# Fun√ß√£o para processar updates
def process_update(update_data):
    """Processa update do Telegram de forma s√≠ncrona"""
    try:
        update = Update.de_json(update_data, bot)
        
        # Verifica se √© um comando
        if update.message and update.message.text:
            text = update.message.text
            
            if text.startswith('/start'):
                asyncio.run(start(update))
            elif text.startswith('/help'):
                asyncio.run(help_command(update))
            elif text.startswith('/validate'):
                asyncio.run(validate_command(update))
            elif text.startswith('/status'):
                asyncio.run(status_command(update))
            elif text.startswith('/disconnect'):
                asyncio.run(disconnect_command(update))
            elif text.startswith('/groups'):
                asyncio.run(groups_command(update))
            elif text.startswith('/signals'):
                asyncio.run(signals_command(update))
            elif text.startswith('/stats'):
                asyncio.run(stats_command(update))
            else:
                asyncio.run(handle_message(update))
        
        # Verifica se √© um contato
        elif update.message and update.message.contact:
            asyncio.run(handle_contact(update))
            
    except Exception as e:
        logger.error(f"Erro ao processar update: {e}")

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint do webhook"""
    try:
        update_data = request.get_json()
        
        # Processa update em thread separada
        thread = threading.Thread(target=process_update, args=(update_data,))
        thread.start()
        
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"Erro no webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/', methods=['GET'])
def health_check():
    """Health check"""
    return jsonify({
        'status': 'ok',
        'bot': 'NexoCrypto Telegram Bot',
        'version': '2.0',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    try:
        logger.info("üöÄ Iniciando NexoCrypto Telegram Bot...")
        
        # Configura webhook
        webhook_url = f"https://nexocrypto-telegram-bot.onrender.com/webhook"
        asyncio.run(bot.set_webhook(webhook_url))
        logger.info(f"‚úÖ Webhook configurado: {webhook_url}")
        
        # Inicia Flask
        port = int(os.environ.get('PORT', 10000))
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar bot: {e}")
        sys.exit(1)

