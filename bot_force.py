#!/usr/bin/env python3
"""
NexoCrypto Telegram Bot - Force Takeover Version
Vers√£o que for√ßa a tomada de controle eliminando inst√¢ncias conflitantes
"""

import os
import logging
import asyncio
import requests
import time
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
BOT_TOKEN = os.getenv("BOT_TOKEN", "8287801389:AAGwcmDKhBLh1bJvGHFvKDiRBpxgnw23Kik")
BACKEND_URL = os.getenv("BACKEND_URL", "https://nexocrypto-backend.onrender.com")

def force_webhook_cleanup():
    """For√ßa limpeza completa do webhook para eliminar conflitos"""
    try:
        logger.info("üîÑ Iniciando force takeover do webhook...")
        
        # M√∫ltiplas tentativas agressivas de limpeza
        for attempt in range(10):
            logger.info(f"üîÑ Tentativa {attempt + 1}/10 de force cleanup...")
            
            try:
                # Delete webhook com drop_pending_updates
                response = requests.post(
                    f'https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook',
                    json={'drop_pending_updates': True},
                    timeout=5
                )
                logger.info(f"Delete webhook: {response.json()}")
                
                # Set webhook vazio para for√ßar reset
                response = requests.post(
                    f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook',
                    json={'url': ''},
                    timeout=5
                )
                logger.info(f"Set empty webhook: {response.json()}")
                
                # Aguarda entre tentativas
                time.sleep(2)
                
            except Exception as e:
                logger.warning(f"Erro na tentativa {attempt + 1}: {e}")
                continue
        
        # Aguarda estabiliza√ß√£o
        logger.info("‚è≥ Aguardando estabiliza√ß√£o...")
        time.sleep(10)
        
        # Verifica status final
        try:
            response = requests.get(
                f'https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo',
                timeout=5
            )
            webhook_info = response.json()
            logger.info(f"‚úÖ Webhook final: {webhook_info}")
            
        except Exception as e:
            logger.warning(f"Erro ao verificar webhook: {e}")
        
        logger.info("üéØ Force takeover conclu√≠do!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no force takeover: {e}")
        return False

def format_brazilian_time():
    """Retorna hor√°rio atual no formato brasileiro"""
    return datetime.now().strftime('%d/%m/%Y - %H:%M')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start"""
    user = update.effective_user
    welcome_message = f"""
ü§ñ **Bem-vindo ao NexoCrypto Bot!**

Ol√° {user.first_name}! üëã

Este bot permite conectar sua conta NexoCrypto ao Telegram para:
‚Ä¢ ‚úÖ Validar sua identidade
‚Ä¢ üìä Receber sinais de trading
‚Ä¢ ü§ñ Configurar Auto Trading
‚Ä¢ üì± Gerenciar grupos conectados

**üìã Comandos dispon√≠veis:**
/validate [UUID] - Validar UUID do sistema

**üîó Acesse nossa plataforma:** https://nexocrypto.app

**üÜò Suporte:** Entre em contato atrav√©s da plataforma

**üöÄ Bot Force Takeover - Vers√£o Definitiva**
    """
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def validate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /validate"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå **Uso incorreto!**\n\n"
            "‚úÖ **Uso correto:** `/validate SEU_UUID`\n\n"
            "üîó **Obtenha seu UUID em:** https://nexocrypto.app",
            parse_mode='Markdown'
        )
        return
    
    uuid_code = context.args[0]
    user = update.effective_user
    
    # Armazena dados para valida√ß√£o
    context.user_data['pending_validation'] = {
        'uuid': uuid_code,
        'telegram_id': user.id,
        'username': user.username or '',
        'first_name': user.first_name or '',
        'last_name': user.last_name or ''
    }
    
    # Solicita contato
    keyboard = [[KeyboardButton("üì± Compartilhar Contato", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîê **Para completar a valida√ß√£o, preciso do seu n√∫mero de telefone.**\n\n"
        "üì± Clique no bot√£o abaixo para compartilhar seu contato:\n\n"
        "‚ö†Ô∏è *Isso √© necess√°rio para capturar seus grupos do Telegram automaticamente.*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa contato compartilhado e completa valida√ß√£o"""
    try:
        contact = update.message.contact
        user = update.effective_user
        
        # Verifica se h√° valida√ß√£o pendente
        if 'pending_validation' not in context.user_data:
            await update.message.reply_text("‚ùå Nenhuma valida√ß√£o pendente. Use /validate primeiro.")
            return
        
        # Verifica se o contato √© do pr√≥prio usu√°rio
        if contact.user_id != user.id:
            await update.message.reply_text("‚ùå Por favor, compartilhe seu pr√≥prio contato.")
            return
        
        # Completa dados do usu√°rio
        user_data = context.user_data['pending_validation']
        user_data['phone_number'] = contact.phone_number
        
        # Remove teclado
        await update.message.reply_text(
            "‚úÖ Contato recebido! Processando valida√ß√£o...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Envia dados para o backend
        try:
            response = requests.post(f'{BACKEND_URL}/api/telegram/validate', 
                                   json=user_data, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    success_message = f"""
‚úÖ **Valida√ß√£o Bem-Sucedida!**

üéâ Sua conta foi conectada com sucesso!

**üë§ Dados Confirmados:**
‚Ä¢ **Nome:** {user.first_name} {user.last_name or ''}
‚Ä¢ **Username:** @{user.username or 'N/A'}
‚Ä¢ **Telefone:** {contact.phone_number}
‚Ä¢ **UUID:** `{user_data['uuid'][:8]}...{user_data['uuid'][-8:]}`

**ü§ñ Funcionalidades Ativadas:**
‚Ä¢ ‚úÖ Auto Trading
‚Ä¢ ‚úÖ Monitoramento de Sinais
‚Ä¢ ‚úÖ Captura de Grupos
‚Ä¢ ‚úÖ An√°lise com IA

**üîó Acesse:** https://nexocrypto.app

**üìã PR√ìXIMO PASSO IMPORTANTE:**
üîÑ **Volte para o NexoCrypto** e clique no bot√£o **"Verificar Valida√ß√£o"** para completar a conex√£o e carregar seus grupos do Telegram!

‚ö†Ô∏è *Sem este passo, seus grupos n√£o aparecer√£o na plataforma.*

**üöÄ Bot Force Takeover - Funcionando Perfeitamente!**
"""
                    
                    await update.message.reply_text(success_message, parse_mode='Markdown')
                else:
                    await update.message.reply_text(
                        f"‚ùå **Erro na valida√ß√£o:** {data.get('error', 'Erro desconhecido')}"
                    )
            else:
                await update.message.reply_text(
                    "‚ùå **Erro de comunica√ß√£o com o servidor.**\n\n"
                    "üîÑ **Tente novamente em alguns minutos.**"
                )
        except requests.exceptions.RequestException as e:
            logger.error(f"Erro na requisi√ß√£o: {e}")
            await update.message.reply_text(
                "‚ùå **Erro de conex√£o com o servidor.**\n\n"
                "üîÑ **Verifique sua conex√£o e tente novamente.**"
            )
        
        # Limpa dados tempor√°rios
        context.user_data.pop('pending_validation', None)
        
    except Exception as e:
        logger.error(f"Erro no handle_contact: {e}")
        await update.message.reply_text(
            "‚ùå **Erro interno do bot.**\n\n"
            "üîÑ **Tente novamente em alguns minutos.**"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa mensagens n√£o-comando"""
    await update.message.reply_text(
        "ü§ñ **Ol√°!**\n\n"
        "Use /start para ver os comandos dispon√≠veis.\n\n"
        "**üîó Acesse:** https://nexocrypto.app\n\n"
        "**üöÄ Bot Force Takeover Ativo**"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Trata erros do bot"""
    logger.error(f"Erro: {context.error}")

def main():
    """Fun√ß√£o principal com force takeover"""
    try:
        logger.info("üöÄ Iniciando NexoCrypto Bot Force Takeover...")
        logger.info(f"üîó Backend: {BACKEND_URL}")
        
        # FOR√áA LIMPEZA DO WEBHOOK
        logger.info("üîÑ Executando force takeover...")
        if not force_webhook_cleanup():
            logger.warning("‚ö†Ô∏è Force takeover falhou, mas continuando...")
        
        # Aguarda estabiliza√ß√£o adicional
        logger.info("‚è≥ Aguardando estabiliza√ß√£o final...")
        time.sleep(5)
        
        # Cria aplica√ß√£o com configura√ß√µes otimizadas
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Adiciona handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("validate", validate))
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # Handler de erros
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ Bot configurado com force takeover!")
        
        # Inicia o bot com configura√ß√µes agressivas
        logger.info("üéØ Iniciando polling com force takeover...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            poll_interval=1.0,
            timeout=20,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            pool_timeout=30
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        # Tenta novamente ap√≥s erro
        logger.info("üîÑ Tentando reiniciar ap√≥s erro...")
        time.sleep(10)
        main()

if __name__ == '__main__':
    main()

