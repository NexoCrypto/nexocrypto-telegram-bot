#!/usr/bin/env python3
"""
NexoCrypto Telegram Bot - Webhook Ultra Robust Version
Vers√£o ultra-robusta com webhook otimizada para Render
"""

import os
import sys
import time
import signal
import logging
import asyncio
import threading
from datetime import datetime
from flask import Flask, jsonify, request
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Configura√ß√£o de logging otimizada
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8287801389:AAGwcmDKhBLh1bJvGHFvKDiRBpxgnw23Kik')
BACKEND_URL = os.environ.get('BACKEND_URL', 'https://nexocrypto-backend.onrender.com')
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = f"https://nexocrypto-telegram-bot.onrender.com/webhook"

# Flask app
app = Flask(__name__)

# Estado global
telegram_app = None
start_time = time.time()
last_activity = time.time()
shutdown_requested = False

@app.route('/')
def health_check():
    """Health check otimizado"""
    global last_activity
    last_activity = time.time()
    
    uptime = int(time.time() - start_time)
    return jsonify({
        'status': 'healthy',
        'service': 'nexocrypto-telegram-bot-webhook',
        'version': '2.0',
        'uptime_seconds': uptime,
        'uptime_formatted': f"{uptime//3600}h {(uptime%3600)//60}m",
        'webhook_active': True,
        'last_activity': datetime.fromtimestamp(last_activity).isoformat()
    }), 200

@app.route('/ping')
def ping():
    """Ping para keep-alive"""
    global last_activity
    last_activity = time.time()
    return jsonify({'pong': True, 'timestamp': datetime.now().isoformat()}), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook do Telegram"""
    global last_activity, telegram_app
    
    try:
        last_activity = time.time()
        
        if not telegram_app:
            logger.error("‚ùå Telegram app n√£o inicializada")
            return jsonify({'error': 'Bot not ready'}), 503
        
        # Processa update
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            # Processa de forma ass√≠ncrona
            asyncio.create_task(telegram_app.process_update(update))
            
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erro no webhook: {e}")
        return jsonify({'error': str(e)}), 500

def intelligent_keepalive():
    """Keep-alive inteligente"""
    service_url = "https://nexocrypto-telegram-bot.onrender.com"
    
    while not shutdown_requested:
        try:
            # Aguarda 12 minutos (menor que 15min do Render)
            for _ in range(720):  # 12 * 60 segundos
                if shutdown_requested:
                    return
                time.sleep(1)
            
            # Self-ping
            try:
                response = requests.get(f"{service_url}/ping", timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Keep-alive OK")
                else:
                    logger.warning(f"‚ö†Ô∏è Keep-alive: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Keep-alive falhou: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no keep-alive: {e}")
            time.sleep(60)

async def setup_webhook():
    """Configura webhook de forma robusta"""
    for attempt in range(3):
        try:
            logger.info(f"üîÑ Configurando webhook (tentativa {attempt + 1}/3)...")
            
            # Remove webhook existente
            delete_response = requests.post(
                f'https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook',
                json={'drop_pending_updates': True},
                timeout=15
            )
            logger.info(f"Delete webhook: {delete_response.json()}")
            
            await asyncio.sleep(2)
            
            # Configura novo webhook
            webhook_response = requests.post(
                f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook',
                json={
                    'url': WEBHOOK_URL,
                    'allowed_updates': ['message'],
                    'drop_pending_updates': True
                },
                timeout=15
            )
            
            result = webhook_response.json()
            logger.info(f"Set webhook: {result}")
            
            if result.get('ok'):
                logger.info("‚úÖ Webhook configurado!")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro webhook (tentativa {attempt + 1}): {e}")
            
        if attempt < 2:
            await asyncio.sleep(5)
    
    return False

# Handlers do Telegram
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    global last_activity
    last_activity = time.time()
    
    user = update.effective_user
    logger.info(f"Comando /start de {user.username or user.first_name}")
    
    welcome_message = f"""ü§ñ **Bem-vindo ao NexoCrypto Bot!**

Ol√° {user.first_name}! üëã

Este bot permite conectar sua conta NexoCrypto ao Telegram para:
‚Ä¢ ‚úÖ Validar sua identidade
‚Ä¢ üìä Receber sinais de trading
‚Ä¢ ü§ñ Configurar Auto Trading
‚Ä¢ üì± Gerenciar grupos conectados

**üìã Comandos dispon√≠veis:**
/validate [UUID] - Validar UUID do sistema

**üîó Acesse nossa plataforma:** https://nexocrypto.app

**üÜò Suporte:** Entre em contato atrav√©s da plataforma

**‚ö° Bot Webhook Ultra-Robusto - Dispon√≠vel 24/7**"""
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def validate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /validate"""
    global last_activity
    last_activity = time.time()
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå **Uso incorreto!**\n\n"
            "‚úÖ **Uso correto:** `/validate SEU_UUID`\n\n"
            "üîó **Obtenha seu UUID em:** https://nexocrypto.app",
            parse_mode='Markdown'
        )
        return
    
    uuid_code = context.args[0]
    user = update.effective_user
    
    # Armazena dados para valida√ß√£o
    context.user_data['pending_validation'] = {
        'uuid': uuid_code,
        'telegram_id': user.id,
        'username': user.username or '',
        'first_name': user.first_name or '',
        'last_name': user.last_name or ''
    }
    
    # Solicita contato
    keyboard = [[KeyboardButton("üì± Compartilhar Contato", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîê **Para completar a valida√ß√£o, preciso do seu n√∫mero de telefone.**\n\n"
        "üì± Clique no bot√£o abaixo para compartilhar seu contato:\n\n"
        "‚ö†Ô∏è *Isso √© necess√°rio para capturar seus grupos do Telegram automaticamente.*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa contato compartilhado"""
    global last_activity
    last_activity = time.time()
    
    try:
        contact = update.message.contact
        user = update.effective_user
        
        # Verifica valida√ß√£o pendente
        if 'pending_validation' not in context.user_data:
            await update.message.reply_text("‚ùå Nenhuma valida√ß√£o pendente. Use /validate primeiro.")
            return
        
        # Verifica se √© o pr√≥prio contato
        if contact.user_id != user.id:
            await update.message.reply_text("‚ùå Por favor, compartilhe seu pr√≥prio contato.")
            return
        
        # Completa dados
        user_data = context.user_data['pending_validation']
        user_data['phone_number'] = contact.phone_number
        
        # Remove teclado
        await update.message.reply_text(
            "‚úÖ Contato recebido! Processando valida√ß√£o...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Envia para backend
        try:
            response = requests.post(
                f'{BACKEND_URL}/api/telegram/validate', 
                json=user_data, 
                timeout=20
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    success_message = f"""‚úÖ **Valida√ß√£o Bem-Sucedida!**

üéâ Sua conta foi conectada com sucesso!

**üë§ Dados Confirmados:**
‚Ä¢ **Nome:** {user.first_name} {user.last_name or ''}
‚Ä¢ **Username:** @{user.username or 'N/A'}
‚Ä¢ **Telefone:** {contact.phone_number}
‚Ä¢ **UUID:** `{user_data['uuid'][:8]}...{user_data['uuid'][-8:]}`

**ü§ñ Funcionalidades Ativadas:**
‚Ä¢ ‚úÖ Auto Trading
‚Ä¢ ‚úÖ Monitoramento de Sinais
‚Ä¢ ‚úÖ Captura de Grupos
‚Ä¢ ‚úÖ An√°lise com IA

**üîó Acesse:** https://nexocrypto.app

**üìã PR√ìXIMO PASSO IMPORTANTE:**
üîÑ **Volte para o NexoCrypto** e clique no bot√£o **"Verificar Valida√ß√£o"** para completar a conex√£o e carregar seus grupos do Telegram!

‚ö†Ô∏è *Sem este passo, seus grupos n√£o aparecer√£o na plataforma.*

**‚ö° Bot Webhook Ultra-Robusto - Dispon√≠vel 24/7 sem interrup√ß√µes!**"""
                    
                    await update.message.reply_text(success_message, parse_mode='Markdown')
                else:
                    await update.message.reply_text(
                        f"‚ùå **Erro na valida√ß√£o:** {data.get('error', 'Erro desconhecido')}"
                    )
            else:
                await update.message.reply_text(
                    "‚ùå **Erro de comunica√ß√£o com o servidor.**\n\n"
                    "üîÑ **Tente novamente em alguns minutos.**"
                )
        except requests.exceptions.RequestException as e:
            logger.error(f"Erro na requisi√ß√£o: {e}")
            await update.message.reply_text(
                "‚ùå **Erro de conex√£o com o servidor.**\n\n"
                "üîÑ **Verifique sua conex√£o e tente novamente.**"
            )
        
        # Limpa dados tempor√°rios
        context.user_data.pop('pending_validation', None)
        
    except Exception as e:
        logger.error(f"Erro no handle_contact: {e}")
        await update.message.reply_text(
            "‚ùå **Erro interno do bot.**\n\n"
            "üîÑ **Tente novamente em alguns minutos.**"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa mensagens gerais"""
    global last_activity
    last_activity = time.time()
    
    await update.message.reply_text(
        "ü§ñ **Ol√°!**\n\n"
        "Use /start para ver os comandos dispon√≠veis.\n\n"
        "**üîó Acesse:** https://nexocrypto.app\n\n"
        "**‚ö° Bot Webhook Ultra-Robusto - Sempre Dispon√≠vel**"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """Handler de erros"""
    logger.error(f"Erro do bot: {context.error}")

def signal_handler(signum, frame):
    """Handler de sinais do sistema"""
    global shutdown_requested
    logger.info(f"üõë Sinal {signum} recebido")
    shutdown_requested = True

def run_flask():
    """Executa Flask"""
    try:
        logger.info("üåê Iniciando servidor Flask...")
        app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False, threaded=True)
    except Exception as e:
        logger.error(f"‚ùå Erro no Flask: {e}")

async def main():
    """Fun√ß√£o principal"""
    global telegram_app, shutdown_requested
    
    try:
        logger.info("üöÄ Iniciando NexoCrypto Bot Webhook Ultra-Robusto...")
        logger.info(f"üîó Backend: {BACKEND_URL}")
        logger.info(f"üåê Port: {PORT}")
        logger.info(f"üîó Webhook: {WEBHOOK_URL}")
        
        # Configura sinais
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        # Inicia Flask
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        # Aguarda Flask
        await asyncio.sleep(3)
        
        # Inicia keep-alive
        keepalive_thread = threading.Thread(target=intelligent_keepalive, daemon=True)
        keepalive_thread.start()
        
        # Cria aplica√ß√£o Telegram
        telegram_app = Application.builder().token(BOT_TOKEN).build()
        
        # Adiciona handlers
        telegram_app.add_handler(CommandHandler("start", start_command))
        telegram_app.add_handler(CommandHandler("validate", validate_command))
        telegram_app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        telegram_app.add_error_handler(error_handler)
        
        # Configura webhook
        webhook_success = await setup_webhook()
        if not webhook_success:
            logger.error("‚ùå Falha cr√≠tica na configura√ß√£o do webhook")
            return
        
        # Inicializa aplica√ß√£o
        await telegram_app.initialize()
        await telegram_app.start()
        
        logger.info("‚úÖ Bot Webhook Ultra-Robusto iniciado!")
        logger.info("‚ö° Sistema webhook + keep-alive ativo!")
        
        # Loop principal
        while not shutdown_requested:
            await asyncio.sleep(1)
        
        logger.info("üõë Iniciando shutdown...")
        
        # Cleanup
        await telegram_app.stop()
        await telegram_app.shutdown()
        
        logger.info("‚úÖ Shutdown conclu√≠do")
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido")
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o: {e}")
        sys.exit(1)

